// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract AtomicSwap {
    struct Swap {
        bool isAccepted;
        address userA;
        address userB;
        address tokenA;
        address tokenB;
        uint256 amountA;
        uint256 amountB;
    }

    mapping(bytes32 => Swap) public swaps;

    // Events
    event SwapInitiated(
        uint256 swapId,
        address indexed userA,
        address indexed userB,
        address tokenA,
        address tokenB,
        uint256 amountA,
        uint256 amountB,
        uint256 timestamp
    );
    event SwapAccepted(
        uint256 indexed swapId, address indexed userA, address indexed userB, uint256 timestamp
    );
    event SwapCancelled(uint256 indexed swapId, address indexed userA, uint256 timestamp);

    // User A initiates the swap
    function initiateSwap(
        address userB,
        address tokenA,
        address tokenB,
        uint256 amountA,
        uint256 amountB
    ) external {
        // ensure userA owns the amount of tokenA they want to swap
        require(
            IERC20(tokenA).balanceOf(msg.sender) >= amountA, "User A does not have enough token A"
        );

        // ensure userB owns the amount of tokenB they want to swap
        require(IERC20(tokenB).balanceOf(userB) >= amountB, "User B does not have enough token B");

        // calculating swapId using keccak256 ensures that the swapId is unique
        // also, it can be generated by both parties without the need to communicate
        bytes32 swapId =
            keccak256(abi.encodePacked(msg.sender, userB, tokenA, tokenB, amountA, amountB));
        require(swaps[swapId].userA == address(0), "Swap already initiated");

        emit SwapInitiated(
            uint256(swapId), msg.sender, userB, tokenA, tokenB, amountA, amountB, block.timestamp
        );

        swaps[swapId] = Swap(false, msg.sender, userB, tokenA, tokenB, amountA, amountB);
    }

    // Repeated swaps need a random salt
    function initiateSwap(
        address userB,
        address tokenA,
        address tokenB,
        uint256 amountA,
        uint256 amountB,
        bytes32 salt
    ) external returns (bytes32) {
        // for situations where repeated swaps between same users of exactly the same tokens and amounts are needed
        bytes32 swapId =
            keccak256(abi.encodePacked(msg.sender, userB, tokenA, tokenB, amountA, amountB, salt));
        require(swaps[swapId].userA == address(0), "Swap already initiated");

        swaps[swapId] = Swap(false, msg.sender, userB, tokenA, tokenB, amountA, amountB);

        emit SwapInitiated(
            uint256(swapId), msg.sender, userB, tokenA, tokenB, amountA, amountB, block.timestamp
        );

        return swapId;
    }

    // User B accepts the swap
    function acceptSwap(bytes32 swapId) external {
        Swap storage swap = swaps[swapId];

        require(swap.userB == msg.sender, "Unauthorized");
        require(swap.isAccepted == false, "Swap already accepted");

        // update swap isAccepted, this will prevent reentrancy
        swap.isAccepted = true;

        require(
            IERC20(swap.tokenA).transferFrom(swap.userA, msg.sender, swap.amountA),
            "Transfer of tokenA failed"
        );
        require(
            IERC20(swap.tokenB).transferFrom(msg.sender, swap.userA, swap.amountB),
            "Transfer of tokenB failed"
        );

        emit SwapAccepted(uint256(swapId), swap.userA, swap.userB, block.timestamp);
    }

    function cancelSwap(bytes32 swapId) public {
        Swap storage swap = swaps[swapId];
        // only userA can cancel the swap
        require(swap.userA == msg.sender, "Unauthorized");
        // only if the swap is not accepted
        require(swap.isAccepted == false, "Swap already accepted");
        // cancel the swap
        delete swaps[swapId];

        emit SwapCancelled(uint256(swapId), swap.userA, block.timestamp);
    }

    // view swap details
    function getSwap(bytes32 swapId) external view returns (Swap memory) {
        return swaps[swapId];
    }
}
